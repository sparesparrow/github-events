# Docker Compose configuration for GitHub Events Monitor with DynamoDB
# This setup includes local DynamoDB for development and testing

version: '3.8'

services:
  # DynamoDB Local for development
  dynamodb-local:
    image: amazon/dynamodb-local:latest
    container_name: github-events-dynamodb
    ports:
      - "8000:8000"
    command: ["-jar", "DynamoDBLocal.jar", "-sharedDb", "-inMemory"]
    networks:
      - github-events-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8000/ || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # GitHub Events Monitor API with DynamoDB
  github-events-api:
    build: .
    container_name: github-events-api-dynamodb
    ports:
      - "8080:8000"
    environment:
      # Database configuration
      - DATABASE_PROVIDER=dynamodb
      - AWS_REGION=us-east-1
      - DYNAMODB_TABLE_PREFIX=docker-github-events-
      - DYNAMODB_ENDPOINT_URL=http://dynamodb-local:8000
      - AWS_ACCESS_KEY_ID=dummy
      - AWS_SECRET_ACCESS_KEY=dummy
      
      # GitHub configuration
      - GITHUB_TOKEN=${GITHUB_TOKEN:-}
      - TARGET_REPOSITORIES=${TARGET_REPOSITORIES:-sparesparrow/mcp-prompts}
      
      # API configuration
      - API_HOST=0.0.0.0
      - API_PORT=8000
      - LOG_LEVEL=INFO
      
      # Polling configuration
      - POLL_INTERVAL=300
    depends_on:
      dynamodb-local:
        condition: service_healthy
    networks:
      - github-events-network
    volumes:
      - ./logs:/app/logs
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8000/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  # DynamoDB Admin UI (optional)
  dynamodb-admin:
    image: aaronshaf/dynamodb-admin:latest
    container_name: github-events-dynamodb-admin
    ports:
      - "8001:8001"
    environment:
      - DYNAMO_ENDPOINT=http://dynamodb-local:8000
      - AWS_REGION=us-east-1
      - AWS_ACCESS_KEY_ID=dummy
      - AWS_SECRET_ACCESS_KEY=dummy
    depends_on:
      - dynamodb-local
    networks:
      - github-events-network

  # Table setup service (runs once to create tables)
  dynamodb-setup:
    build: .
    container_name: github-events-dynamodb-setup
    environment:
      - AWS_REGION=us-east-1
      - DYNAMODB_TABLE_PREFIX=docker-github-events-
      - DYNAMODB_ENDPOINT_URL=http://dynamodb-local:8000
      - AWS_ACCESS_KEY_ID=dummy
      - AWS_SECRET_ACCESS_KEY=dummy
    command: ["python", "scripts/setup_dynamodb.py", "create"]
    depends_on:
      dynamodb-local:
        condition: service_healthy
    networks:
      - github-events-network

networks:
  github-events-network:
    driver: bridge

volumes:
  dynamodb-data:
    driver: local