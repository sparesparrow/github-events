# Docker Compose configuration for GitHub Events Monitor Agent Ecosystem
# Supports containerized repository agents with DynamoDB backend

version: '3.8'

services:
  # DynamoDB for agent context storage
  dynamodb-local:
    image: amazon/dynamodb-local:latest
    container_name: github-events-dynamodb-agents
    ports:
      - "8000:8000"
    command: ["-jar", "DynamoDBLocal.jar", "-sharedDb"]
    networks:
      - github-events-agents-network
    volumes:
      - dynamodb-agent-data:/home/dynamodblocal/data
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8000/ || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # GitHub Events Monitor API (shared context provider)
  github-events-api:
    build: .
    container_name: github-events-agents-api
    ports:
      - "8080:8000"
    environment:
      # Database configuration for agent context
      - DATABASE_PROVIDER=dynamodb
      - AWS_REGION=us-east-1
      - DYNAMODB_TABLE_PREFIX=agents-github-events-
      - DYNAMODB_ENDPOINT_URL=http://dynamodb-local:8000
      - AWS_ACCESS_KEY_ID=dummy
      - AWS_SECRET_ACCESS_KEY=dummy
      
      # Target repositories for ecosystem monitoring
      - TARGET_REPOSITORIES=sparesparrow/mcp-prompts,sparesparrow/mcp-project-orchestrator,sparesparrow/mcp-router,sparesparrow/podman-desktop-extension-mcp,sparesparrow/ai-servis
      
      # GitHub configuration
      - GITHUB_TOKEN=${GITHUB_TOKEN:-}
      
      # API configuration
      - API_HOST=0.0.0.0
      - API_PORT=8000
      - LOG_LEVEL=INFO
      
      # Focused polling for agent coordination
      - POLL_INTERVAL=180
    depends_on:
      dynamodb-local:
        condition: service_healthy
    networks:
      - github-events-agents-network
    volumes:
      - ./logs:/app/logs
      - agent-context-data:/app/data
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8000/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  # MCP Prompts Repository Agent
  mcp-prompts-agent:
    build: .
    container_name: mcp-prompts-agent
    environment:
      - TARGET_REPOSITORY=sparesparrow/mcp-prompts
      - AGENT_TYPE=prompt_librarian
      - DATABASE_PROVIDER=dynamodb
      - DYNAMODB_ENDPOINT_URL=http://dynamodb-local:8000
      - AWS_ACCESS_KEY_ID=dummy
      - AWS_SECRET_ACCESS_KEY=dummy
      - GITHUB_TOKEN=${GITHUB_TOKEN:-}
      - GITHUB_EVENTS_API_URL=http://github-events-api:8000
    depends_on:
      github-events-api:
        condition: service_healthy
    networks:
      - github-events-agents-network
    volumes:
      - mcp-prompts-workspace:/workspace
      - agent-context-data:/app/data:ro
    command: ["python", "scripts/repository_agent.py"]

  # Project Orchestrator Repository Agent  
  project-orchestrator-agent:
    build: .
    container_name: project-orchestrator-agent
    environment:
      - TARGET_REPOSITORY=sparesparrow/mcp-project-orchestrator
      - AGENT_TYPE=project_orchestrator
      - DATABASE_PROVIDER=dynamodb
      - DYNAMODB_ENDPOINT_URL=http://dynamodb-local:8000
      - AWS_ACCESS_KEY_ID=dummy
      - AWS_SECRET_ACCESS_KEY=dummy
      - GITHUB_TOKEN=${GITHUB_TOKEN:-}
      - GITHUB_EVENTS_API_URL=http://github-events-api:8000
    depends_on:
      github-events-api:
        condition: service_healthy
    networks:
      - github-events-agents-network
    volumes:
      - project-orchestrator-workspace:/workspace
      - agent-context-data:/app/data:ro
    command: ["python", "scripts/repository_agent.py"]

  # Router Repository Agent
  router-agent:
    build: .
    container_name: router-agent
    environment:
      - TARGET_REPOSITORY=sparesparrow/mcp-router
      - AGENT_TYPE=workflow_router
      - DATABASE_PROVIDER=dynamodb
      - DYNAMODB_ENDPOINT_URL=http://dynamodb-local:8000
      - AWS_ACCESS_KEY_ID=dummy
      - AWS_SECRET_ACCESS_KEY=dummy
      - GITHUB_TOKEN=${GITHUB_TOKEN:-}
      - GITHUB_EVENTS_API_URL=http://github-events-api:8000
    depends_on:
      github-events-api:
        condition: service_healthy
    networks:
      - github-events-agents-network
    volumes:
      - router-workspace:/workspace
      - agent-context-data:/app/data:ro
    command: ["python", "scripts/repository_agent.py"]

  # Podman Extension Repository Agent
  podman-agent:
    build: .
    container_name: podman-agent
    environment:
      - TARGET_REPOSITORY=sparesparrow/podman-desktop-extension-mcp
      - AGENT_TYPE=container_manager
      - DATABASE_PROVIDER=dynamodb
      - DYNAMODB_ENDPOINT_URL=http://dynamodb-local:8000
      - AWS_ACCESS_KEY_ID=dummy
      - AWS_SECRET_ACCESS_KEY=dummy
      - GITHUB_TOKEN=${GITHUB_TOKEN:-}
      - GITHUB_EVENTS_API_URL=http://github-events-api:8000
    depends_on:
      github-events-api:
        condition: service_healthy
    networks:
      - github-events-agents-network
    volumes:
      - podman-workspace:/workspace
      - agent-context-data:/app/data:ro
      - /var/run/docker.sock:/var/run/docker.sock  # For container management
    command: ["python", "scripts/repository_agent.py"]

  # AI Service Repository Agent
  ai-servis-agent:
    build: .
    container_name: ai-servis-agent
    environment:
      - TARGET_REPOSITORY=sparesparrow/ai-servis
      - AGENT_TYPE=ai_service_manager
      - DATABASE_PROVIDER=dynamodb
      - DYNAMODB_ENDPOINT_URL=http://dynamodb-local:8000
      - AWS_ACCESS_KEY_ID=dummy
      - AWS_SECRET_ACCESS_KEY=dummy
      - GITHUB_TOKEN=${GITHUB_TOKEN:-}
      - GITHUB_EVENTS_API_URL=http://github-events-api:8000
    depends_on:
      github-events-api:
        condition: service_healthy
    networks:
      - github-events-agents-network
    volumes:
      - ai-servis-workspace:/workspace
      - agent-context-data:/app/data:ro
    command: ["python", "scripts/repository_agent.py"]

  # GitHub Events MCP Server (provides context to agents)
  github-events-mcp:
    build: .
    container_name: github-events-mcp-server
    environment:
      - DATABASE_PROVIDER=dynamodb
      - DYNAMODB_ENDPOINT_URL=http://dynamodb-local:8000
      - AWS_ACCESS_KEY_ID=dummy
      - AWS_SECRET_ACCESS_KEY=dummy
      - TARGET_REPOSITORIES=sparesparrow/mcp-prompts,sparesparrow/mcp-project-orchestrator,sparesparrow/mcp-router,sparesparrow/podman-desktop-extension-mcp,sparesparrow/ai-servis
    depends_on:
      github-events-api:
        condition: service_healthy
    networks:
      - github-events-agents-network
    volumes:
      - agent-context-data:/app/data:ro
    command: ["python", "scripts/github_events_mcp_server.py"]
    stdin_open: true
    tty: true

  # Agent Coordination Dashboard
  agent-dashboard:
    build: .
    container_name: agent-coordination-dashboard
    ports:
      - "8081:8000"
    environment:
      - DASHBOARD_TYPE=agent_coordination
      - GITHUB_EVENTS_API_URL=http://github-events-api:8000
      - TARGET_REPOSITORIES=sparesparrow/mcp-prompts,sparesparrow/mcp-project-orchestrator,sparesparrow/mcp-router,sparesparrow/podman-desktop-extension-mcp,sparesparrow/ai-servis
    depends_on:
      github-events-api:
        condition: service_healthy
    networks:
      - github-events-agents-network
    volumes:
      - ./docs:/app/docs
    command: ["python", "scripts/agent_dashboard.py"]

networks:
  github-events-agents-network:
    driver: bridge

volumes:
  dynamodb-agent-data:
    driver: local
  agent-context-data:
    driver: local
  mcp-prompts-workspace:
    driver: local
  project-orchestrator-workspace:
    driver: local
  router-workspace:
    driver: local
  podman-workspace:
    driver: local
  ai-servis-workspace:
    driver: local