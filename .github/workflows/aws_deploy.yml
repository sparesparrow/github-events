name: Deploy static dashboard to AWS S3

on:
  workflow_dispatch:
    inputs:
      s3_bucket:
        description: 'S3 bucket name'
        required: true
      aws_region:
        description: 'AWS region'
        required: true
        default: 'us-east-1'
      cloudfront_distribution_id:
        description: 'CloudFront distribution ID (optional)'
        required: false
        default: ''

permissions:
  contents: read

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Initialize database schema
        run: |
          if [ -f database/schema.sql ]; then
            sqlite3 database/events.db < database/schema.sql
          fi

      - name: One-time GitHub ingest (populate DB)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if [ -f service/github_monitor.py ]; then
            python service/github_monitor.py --once || true
          fi

      - name: Start API server
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CORS_ORIGINS: "*"
        run: |
          nohup python -m src.github_events_monitor.api > api.log 2>&1 &
          echo $! > api.pid

      - name: Wait for API to be ready
        run: |
          for i in {1..30}; do
            if curl -fsS http://localhost:8000/health >/dev/null; then
              echo "API is ready"
              break
            fi
            sleep 2
          done

      - name: Export dashboard HTML via MCP tool (pages_content/index.html)
        run: |
          python - <<'PY'
from mcp.dashboard_export_server import export_dashboard_html
out = export_dashboard_html(base_url="http://localhost:8000", include_plotlyjs="cdn", output_path="pages_content/index.html")
print(out)
PY

      - name: Export JSON artifacts (optional)
        run: |
          mkdir -p pages_content
          if [ -f service/data_exporter.py ]; then
            python service/data_exporter.py || true
          fi
          # Ensure index.html exists in pages_content/
          if [ ! -f pages_content/index.html ] && [ -f docs/index.html ]; then
            cp docs/index.html pages_content/index.html
          fi

      - name: Stop API server
        if: always()
        run: |
          if [ -f api.pid ]; then
            kill $(cat api.pid) || true
          fi

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ inputs.aws_region }}

      - name: Sync to S3
        run: |
          aws s3 sync pages_content/ s3://${{ inputs.s3_bucket }}/ --delete --acl public-read

      - name: Invalidate CloudFront cache
        if: ${{ inputs.cloudfront_distribution_id != '' }}
        run: |
          aws cloudfront create-invalidation --distribution-id "${{ inputs.cloudfront_distribution_id }}" --paths "/*"
