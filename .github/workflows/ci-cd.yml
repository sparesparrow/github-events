name: CI/CD Pipeline with Testing and Visualization

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 6 * * *'

env:
  PYTHON_VERSION: '3.11'

jobs:
  test-and-build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      - name: Install deps + project (editable)
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -e .
      - name: Run unit tests
        env:
          PYTHONPATH: ${{ github.workspace }}/src
        run: |
          pytest -q
  example-usage:
    runs-on: ubuntu-latest
    needs: test-and-build
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      - name: Install deps + project (editable)
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -e .
      - name: Start API with health check
        env:
          PYTHONPATH: ${{ github.workspace }}/src
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DATABASE_PATH: ./demo_github_events.db
        run: |
          python -m github_events_monitor.api > server.log 2>&1 &
          SERVER_PID=$!
          echo $SERVER_PID > server.pid
          for i in {1..60}; do
            if ! kill -0 $SERVER_PID 2>/dev/null; then
              echo "Server exited, logs:" && cat server.log && exit 1
            fi
            if curl -fsS --connect-timeout 3 --max-time 5 http://127.0.0.1:8000/health >/dev/null; then
              echo "Server healthy" && break
            fi
            sleep 5
            if [ $i -eq 60 ]; then
              echo "Health check failed, logs:" && cat server.log && exit 1
            fi
          done
      - name: Run API examples
        env:
          API_BASE_URL: http://127.0.0.1:8000
        run: |
          python <<'PY'
          import requests, json, time, os
          time.sleep(10)
          base = os.getenv("API_BASE_URL","http://127.0.0.1:8000")
          out = []
          def call(ep):
              try:
                  r = requests.get(base+ep, timeout=15)
                  return {"endpoint":ep,"status":r.status_code,"ok":r.ok,"data":(r.json() if r.ok else r.text)[:400]}
              except Exception as e:
                  return {"endpoint":ep,"status":0,"ok":False,"error":str(e)}
          out.append(call("/health"))
          for m in [10,30,60]:
              out.append(call(f"/metrics/event-counts?offset_minutes={m}"))
          with open("api_examples_results.json","w") as f:
              json.dump({"examples":out},f,indent=2)
          PY
      - name: Upload results
        uses: actions/upload-artifact@v4
        with:
          name: api-examples-results
          path: |
            api_examples_results.json
            server.log
