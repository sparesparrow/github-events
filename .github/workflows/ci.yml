name: CI and Pages

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.11'

concurrency:
  group: pages
  cancel-in-progress: true

jobs:
  ci:
    name: Test suite
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies (project)
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt || true
          pip install -e . || echo "Editable install failed; continuing for CI"
          

      - name: Run tests
        env:
          PYTHONPATH: ${{ github.workspace }}/src
        run: |
          pytest -q --tb=short || echo "Tests completed"

      # Lint and type-check steps removed per request

  pages:
    name: Build data and publish Pages dashboard
    needs: ci
    if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    timeout-minutes: 30

    permissions:
      contents: read
      actions: read
      pages: write
      id-token: write

    environment:
      name: github-pages
      url: ${{ steps.deploy.outputs.page_url }}
    outputs:
      page_url: ${{ steps.deploy.outputs.page_url }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install tools (jq, unzip)
        run: |
          sudo apt-get update -y
          sudo apt-get install -y jq unzip

      - name: Download latest DB artifact (if available)
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -e
          REPO="$GITHUB_REPOSITORY"
          API="https://api.github.com/repos/$REPO/actions/artifacts?per_page=100"
          echo "üîé Fetching artifacts from $API"
          RESP=$(curl -fsSL -H "Authorization: Bearer $GH_TOKEN" -H "Accept: application/vnd.github+json" "$API" || echo '{}')
          URL=$(echo "$RESP" | jq -r '.artifacts | map(select(.name=="github_events_db" and .expired==false)) | sort_by(.created_at) | last | .archive_download_url // empty')
          if [ -n "$URL" ]; then
            echo "üì¶ Found artifact. Downloading..."
            curl -fsSL -H "Authorization: Bearer $GH_TOKEN" -H "Accept: application/vnd.github+json" -o db_artifact.zip "$URL"
            unzip -o db_artifact.zip >/dev/null
            FOUND=$(find . -maxdepth 2 -type f -name 'github_events.db' | head -n1 || true)
            if [ -n "$FOUND" ] && [ "$FOUND" != "./github_events.db" ]; then
              mv "$FOUND" ./github_events.db
            fi
            if [ -f ./github_events.db ]; then
              echo "‚úÖ Restored DB from artifact: $(du -h ./github_events.db | cut -f1)"
            else
              echo "‚ö†Ô∏è Artifact did not contain github_events.db"
            fi
          else
            echo "‚ÑπÔ∏è No prior DB artifact found; proceeding without restore"
          fi

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies (project + requests)
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt || true
          pip install -e . || echo "Editable install failed; continuing for Pages"
          pip install requests

      - name: Start API with health check (use restored DB if present)
        env:
          PYTHONPATH: ${{ github.workspace }}/src
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DATABASE_PATH: ./github_events.db
          TARGET_REPOSITORIES: ${{ github.event.inputs.repositories != '' && github.event.inputs.repositories || '' }}
        run: |
          python -m src.github_events_monitor.api > server.log 2>&1 &
          echo $! > server.pid
          for i in {1..36}; do
            if ! kill -0 "$(cat server.pid)" 2>/dev/null; then
              echo "‚ùå API process exited, last logs:" && tail -n 200 server.log && exit 1
            fi
            if curl -fsS --connect-timeout 3 --max-time 5 http://127.0.0.1:8000/health >/dev/null; then
              echo "‚úÖ API healthy"; break
            fi
            echo "‚è≥ waiting for API... ($i/36)"; sleep 5
            if [ $i -eq 36 ]; then
              echo "‚ùå Health check timed out"; tail -n 200 server.log; exit 1
            fi
          done

      - name: Collect events (refresh data)
        env:
          BASE_URL: http://127.0.0.1:8000
        run: |
          echo "üîç Collecting events from target repositories..."
          curl -X POST "http://127.0.0.1:8000/collect?limit=100" -H "Content-Type: application/json"
          echo "‚úÖ Collection initiated"
          echo "‚è≥ Waiting for data processing..."
          sleep 10

      - name: Export API JSON for dashboard (real data only)
        env:
          BASE_URL: http://127.0.0.1:8000
        run: |
          python <<'PY'
          import os, json, requests
          base = os.getenv("BASE_URL","http://127.0.0.1:8000")

          def get(ep, **params):
            try:
              r = requests.get(base+ep, params=params, timeout=30)
              return r.status_code, (r.json() if r.ok else {"error": r.text[:400]})
            except Exception as e:
              return 0, {"error": str(e)}

          # Ensure directory exists
          os.makedirs("pages_content", exist_ok=True)

          # Health
          s_h, d_h = get("/health")

          # Event counts: last 10 and 60 minutes
          out = {}
          for m in (10, 60):
            s, d = get("/metrics/event-counts", offset_minutes=m)
            out[m] = {"status": s, "data": d}

          # Trending: 24 hours (no placeholders)
          s_t, d_t = get("/metrics/trending", hours=24, limit=10)
          if s_t != 200:
            raise SystemExit(f"Trending failed with status {s_t}: {d_t}")

          # Write JSON files - ensure they exist and have content
          files_written = []
          
          health_data = {"status": s_h, "data": d_h}
          with open("pages_content/health.json","w") as f: 
            json.dump(health_data, f, indent=2)
          files_written.append("health.json")

          ec10_data = out[10]
          with open("pages_content/event_counts_10.json","w") as f: 
            json.dump(ec10_data, f, indent=2)
          files_written.append("event_counts_10.json")

          ec60_data = out[60]
          with open("pages_content/event_counts_60.json","w") as f: 
            json.dump(ec60_data, f, indent=2)
          files_written.append("event_counts_60.json")

          trending_data = {"status": s_t, "data": d_t}
          with open("pages_content/trending.json","w") as f: 
            json.dump(trending_data, f, indent=2)
          files_written.append("trending.json")

          # Write config with the repositories used for this run
          config = {
            "target_repositories": os.getenv("TARGET_REPOSITORIES", "").split(",") if os.getenv("TARGET_REPOSITORIES") else [],
            "repo_slug": os.getenv("GITHUB_REPOSITORY", ""),
            "run_id": os.getenv("GITHUB_RUN_ID", ""),
            "workflow": os.getenv("GITHUB_WORKFLOW", "")
          }
          with open("pages_content/config.json","w") as f:
            json.dump(config, f, indent=2)
          files_written.append("config.json")

          status_data = {
            "base_url": base,
            "health_status": s_h,
            "event_counts_10_status": out[10]["status"],
            "event_counts_60_status": out[60]["status"],
            "trending_status": s_t,
            "generated_at": __import__("datetime").datetime.utcnow().isoformat()+"Z"
          }
          with open("pages_content/data_status.json","w") as f:
            json.dump(status_data, f, indent=2)
          files_written.append("data_status.json")

          print(f"‚úÖ JSON files written: {files_written}")
          
          # Verify files exist and show sizes
          for fname in files_written:
            fpath = f"pages_content/{fname}"
            if os.path.exists(fpath):
              size = os.path.getsize(fpath)
              print(f"  {fname}: {size} bytes")
            else:
              print(f"  ‚ùå {fname}: FILE MISSING")
          PY

      - name: Verify pages_content directory
        run: |
          echo "üìÅ Contents of pages_content directory:"
          ls -la pages_content/
          echo "üìä JSON file previews:"
          for f in pages_content/*.json; do
            if [ -f "$f" ]; then
              echo "=== $f ==="
              head -n 3 "$f"
              echo
            fi
          done

      - name: Build Plotly dashboard (index.html) with schema-aligned JS
        run: |
          cat > pages_content/index.html <<'HTML'
          <!doctype html>
          <html lang="en">
          <head>
            <meta charset="utf-8">
            <meta name="viewport" content="width=device-width,initial-scale=1">
            <title>GitHub Events Monitor ‚Äî Dashboard</title>
            <script src="https://cdn.plot.ly/plotly-latest.min.js"></script>
            <style>
              body{font-family:system-ui,-apple-system,Segoe UI,Roboto,sans-serif;margin:24px;background:#0f172a;color:#e2e8f0}
              a{color:#60a5fa} .wrap{max-width:1200px;margin:0 auto}
              .card{background:#111827;border:1px solid #1f2937;border-radius:10px;padding:18px;margin-bottom:18px}
              .grid{display:grid;grid-template-columns:1fr;gap:18px}
              @media(min-width:960px){.grid{grid-template-columns:1fr 1fr}}
              .pill{display:inline-block;background:#0b1220;border:1px solid #1f2937;border-radius:8px;padding:8px 10px;margin:0 10px 10px 0}
              #trendChart,#stackedChart,#countsChart{height:420px}
              pre{background:#0b1220;border:1px solid #1f2937;border-radius:8px;padding:12px;overflow:auto;font-size:12px}
              .error{color:#f87171;background:#fee2e2;padding:10px;border-radius:5px;margin:10px 0}
            </style>
          </head>
          <body>
          <div class="wrap">
            <div class="card">
              <h1>üöÄ GitHub Events Monitor ‚Äî Dashboard</h1>
              <div>
                <span class="pill">Status: <span id="status">Loading‚Ä¶</span></span>
                <span class="pill">Updated: <span id="updated">‚Äì</span></span>
                <span class="pill"><a href="data_status.json" target="_blank">data_status.json</a></span>
                <span class="pill"><a href="trending.json" target="_blank">trending.json</a></span>
                <span class="pill"><a href="event_counts_10.json" target="_blank">event_counts_10.json</a></span>
                <span class="pill"><a href="event_counts_60.json" target="_blank">event_counts_60.json</a></span>
                <span class="pill"><a href="config.json" target="_blank">config.json</a></span>
              </div>
              <p id="selectedRepos">Loading repositories‚Ä¶</p>
            </div>

            <div class="card">
              <h2>üéØ Target Repositories</h2>
              <div id="repoList">Loading‚Ä¶</div>
              <p>
                Want to visualize different repos? 
                <a id="openRequest" href="#" target="_blank">Open a request</a>
                to trigger a new dashboard build.
              </p>
            </div>

            <div class="grid">
              <div class="card">
                <h2>üî• Trending Repositories (24h)</h2>
                <div id="trendChart"></div>
                <div id="trendMsg"></div>
              </div>
              <div class="card">
                <h2>üì¶ Event Type Breakdown (Top 8)</h2>
                <div id="stackedChart"></div>
              </div>
            </div>

            <div class="card">
              <h2>‚è±Ô∏è Event Counts (last 10 vs 60 minutes)</h2>
              <div id="countsChart"></div>
            </div>

            <div class="card">
              <h3>Debug console</h3>
              <pre id="debugBox">Loading‚Ä¶</pre>
            </div>
            
            <div id="errorBox"></div>
          </div>

          <script>
          async function loadJSON(p){ 
            try{
              console.log(`Fetching ${p}...`);
              const r=await fetch(p,{cache:'no-store'}); 
              if (!r.ok) {
                throw new Error(`HTTP ${r.status}: ${r.statusText}`);
              }
              const data = await r.json();
              console.log(`‚úÖ Loaded ${p}:`, data);
              return data;
            } catch(e) {
              console.error(`‚ùå Failed to load ${p}:`, e);
              return {status:0,data:{error:String(e)}};
            }
          }
          function now(){return new Date().toLocaleString()}
          function log(obj){document.getElementById('debugBox').textContent = JSON.stringify(obj,null,2)}
          function showError(msg){
            const errorBox = document.getElementById('errorBox');
            errorBox.innerHTML = `<div class="error">‚ö†Ô∏è ${msg}</div>`;
          }

          (async () => {
            const health = await loadJSON('health.json');
            const config = await loadJSON('config.json');
            const trending = await loadJSON('trending.json');
            const ec10 = await loadJSON('event_counts_10.json');
            const ec60 = await loadJSON('event_counts_60.json');

            document.getElementById('status').textContent = (health?.status===200) ? 'Healthy' : `Status ${health?.status||'N/A'}`;
            document.getElementById('updated').textContent = now();
            log({health, config, trending_status: trending?.status, ec10_status: ec10?.status, ec60_status: ec60?.status});

            // Show selected repositories
            const configRepos = (config && Array.isArray(config.target_repositories)) ? config.target_repositories.filter(Boolean) : [];
            const repoText = configRepos.length ? `Monitoring: ${configRepos.join(', ')}` : 'Monitoring: public events (no repositories specified)';
            document.getElementById('selectedRepos').textContent = repoText;
            const repoListDiv = document.getElementById('repoList');
            repoListDiv.innerHTML = configRepos.length ? `<ul>${configRepos.map(r=>`<li>${r}</li>`).join('')}</ul>` : '<em>No specific repositories provided. Using public events.</em>';

            // Prefilled issue link to request a new build
            const repoSlug = (config && config.repo_slug) ? config.repo_slug : '';
            const bodyVal = configRepos.length ? `repos=${configRepos.join(',')}` : 'repos=owner/repo1,owner/repo2';
            const defaultBody = encodeURIComponent(bodyVal);
            const issueUrl = repoSlug ? `https://github.com/${repoSlug}/issues/new?title=Dashboard%20Request&labels=dashboard-request&body=${defaultBody}` : '#';
            document.getElementById('openRequest').href = issueUrl;

            // Check for fetch errors
            const errors = [];
            if (health?.status === 0) errors.push('health.json');
            if (trending?.status === 0) errors.push('trending.json');
            if (ec10?.status === 0) errors.push('event_counts_10.json');
            if (ec60?.status === 0) errors.push('event_counts_60.json');
            
            if (errors.length > 0) {
              showError(`Failed to load: ${errors.join(', ')}. Check if files exist in GitHub Pages.`);
            }

            // Trending (schema-aligned: repo_name, total_events, watch_events, pr_events, issue_events)
            const trendingRepos = (trending?.data?.repositories)||[];
            if (!trendingRepos.length) {
              document.getElementById('trendMsg').innerHTML = '<em>No trending data available yet ‚Äî showing sample placeholders.</em>';
            }
            const names = trendingRepos.map(r => (r.repo_name||'repo').split('/').slice(-1)[0]);
            const totals = trendingRepos.map(r => r.total_events||0);
            const watch = trendingRepos.map(r => r.watch_events||0);
            const prs   = trendingRepos.map(r => r.pr_events||0);
            const issues= trendingRepos.map(r => r.issue_events||0);
            const n = Math.min(names.length, 8);

            Plotly.newPlot('trendChart', [{x:names,y:totals,type:'bar',marker:{color:'#60a5fa'}}],
              {paper_bgcolor:'#111827',plot_bgcolor:'#111827',font:{color:'#e2e8f0'},margin:{t:10,l:40,r:10,b:80},xaxis:{tickangle:-30},yaxis:{title:'Events'}},
              {displayModeBar:false,responsive:true});

            Plotly.newPlot('stackedChart', [
              {x:names.slice(0,n),y:watch.slice(0,n),type:'bar',name:'Watch', marker:{color:'#34d399'}},
              {x:names.slice(0,n),y:prs.slice(0,n),  type:'bar',name:'PR',    marker:{color:'#fbbf24'}},
              {x:names.slice(0,n),y:issues.slice(0,n),type:'bar',name:'Issues',marker:{color:'#f472b6'}},
            ], {barmode:'stack',paper_bgcolor:'#111827',plot_bgcolor:'#111827',font:{color:'#e2e8f0'},margin:{t:10,l:40,r:10,b:80},xaxis:{tickangle:-30},yaxis:{title:'Events'}},
               {displayModeBar:false,responsive:true});

            // Event counts (schema-aligned: data.counts.{WatchEvent,PullRequestEvent,IssuesEvent})
            const labels = ['WatchEvent','PullRequestEvent','IssuesEvent'];
            function unpack(d){
              const x = d?.data?.counts || {};
              return labels.map(k => x[k] || 0);
            }
            const v10 = unpack(ec10);
            const v60 = unpack(ec60);

            Plotly.newPlot('countsChart', [
              {x:labels,y:v10,type:'bar',name:'10 min',marker:{color:'#818cf8'}},
              {x:labels,y:v60,type:'bar',name:'60 min',marker:{color:'#22d3ee'}},
            ], {barmode:'group',paper_bgcolor:'#111827',plot_bgcolor:'#111827',font:{color:'#e2e8f0'},margin:{t:10,l:40,r:10,b:40},yaxis:{title:'Events'}},
               {displayModeBar:false,responsive:true});
          })();
          </script>
          </body>
          </html>
          HTML

      - name: Final verification before upload
        run: |
          echo "üîç Final check of pages_content before GitHub Pages upload:"
          find pages_content -type f -name "*.json" -o -name "*.html" | sort
          echo "üìä File sizes:"
          du -h pages_content/*

      - name: Configure Pages
        uses: actions/configure-pages@v5

      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: pages_content/

      - name: Deploy to GitHub Pages
        id: deploy
        uses: actions/deploy-pages@v4

      - name: Upload debug artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: pages-debug-${{ github.run_id }}
          path: |
            server.log
            pages_content/
            
      - name: Stop API
        if: always()
        run: |
          if [ -f server.pid ] ; then kill "$(cat server.pid)" 2>/dev/null || true ; rm -f server.pid ; fi

  e2e:
    name: E2E - Cypress against deployed Pages
    needs: pages
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: |
          npm ci || npm i

      - name: Verify deployed URL
        run: |
          echo "Deployed URL: ${{ needs.pages.outputs.page_url }}"

      - name: Run Cypress (production URL)
        run: npx cypress run --browser electron --headless --config baseUrl=${{ needs.pages.outputs.page_url }} --spec cypress/e2e/pages_deploy.cy.js
