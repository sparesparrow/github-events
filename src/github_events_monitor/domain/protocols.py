from __future__ import annotations
from typing import Protocol, Iterable, List, Optional, Dict, Any


class EventWriterProtocol(Protocol):
    async def store_events(self, events: Iterable["GitHubEvent"]) -> int: ...


class EventReaderProtocol(Protocol):
    async def count_events_by_type(self, since_ts: int, repo: Optional[str] = None) -> Dict[str, int]: ...
    async def pr_timestamps(self, repo: str) -> List[int]: ...
    async def activity_by_repo(self, repo: str, since_ts: int) -> Dict[str, int]: ...
    async def trending_since(self, since_ts: int, limit: int = 10) -> List[Dict[str, Any]]: ...
    async def event_counts_timeseries(self, since_ts: int, bucket_minutes: int, repo: Optional[str] = None) -> List[Dict[str, Any]]: ...
